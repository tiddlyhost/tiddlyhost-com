#
# A few common requests that we don't want to pass through to rails
#
location = /ads.txt { return 404; }

# Todo somehow: We want /store.php (only) to be proxied the same as @app
location ~ \.(?:php|jsp|asp|aspx|env|sql)(?:$|\?) { return 404; access_log off; }
location ~ \.sql\.(?:xz|zip|z|gz)(?:$|\?) { return 404; access_log off; }
location ~ /wlwmanifest\.xml(?:$|\?) { return 404; access_log off; }
location ~ \.git/(?:config|HEAD) { return 404; access_log off; }
location ~ /wp-admin/ { return 404; access_log off; }
location ~ /wp-includes/ { return 404; access_log off; }
location ~ /wp-content/ { return 404; access_log off; }
location ~ /wp-plugins/ { return 404; access_log off; }
location ~ /\.well-known/ { return 404; access_log off; }

location ~ ^/_ts_ { return 404; access_log off; }
location ~ ^/_ts/ { return 404; access_log off; }
location ~ ^/_sites/ { return 404; access_log off; }

location = /sitemap.xml { return 404; access_log off; }
location = /index.xml { return 404; access_log off; }

#
# Avoid '413 Request Entity Too Large' when saving TiddlyWikis.
# Using 0 here means unlimited, but I'm thinking some kind of limit
# is probably a good idea. 200m seems large enough. A new site is 2m.
#
client_max_body_size 200m;

#
# In production this is a volume mounting #{Rails.root}/public from the
# rails app container. If the request matches a static file there, serve
# it directly, otherwise pass the request through to rails. (In development
# it won't exist so everything will be passed through to rails. Todo maybe:
# change that.)
#
root /opt/rails-static;

location / {
  # Static assets served directly
  try_files $uri @app;
}

# The more specific match should take precedence over the above
location ~ ^/(assets/|packs/|tiddlywikicore-|) {
  # Let nginx know it can use the static gz files
  gzip_static on;
  # Static assets served directly that can be cached forever
  expires max;
  add_header Cache-Control "public";
  try_files $uri @app;
}

#
# Proxy everything else through to the rails app
#
location @app {
  #
  # The rails application cares about all this so make
  # sure it knows the real request details
  #
  proxy_set_header Host $host;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Real-IP $remote_addr;

  #
  # Not sure what these do...
  #
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_redirect off;

  #
  # The rails app is here
  #
  proxy_pass http://app:3333;
}

#
# The default "bad gateway" page is not very nice so let's use
# a custom page. Should appear if the @app container is down.
#
error_page 502 /custom502.html;
location = /custom502.html {
  root /opt/nginx-html;
  internal;
}
