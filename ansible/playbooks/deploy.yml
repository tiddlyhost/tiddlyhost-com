- name: Deploy Tiddlyhost
  hosts: all
  become: true
  become_user: root

  vars:
    certbot_dns_credentials: "{{ local_root }}/etc/credentials/aws/certbot-dns-user.yml"
    docker_config_json: "{{ local_root }}/etc/credentials/docker/config-pull.json"
    docker_compose_file: "{{ local_root }}/docker-compose-prod.yml"
    master_key_file: "{{ local_root }}/rails/config/master.key"
    credentials_file: "{{ local_root }}/rails/config/credentials.yml.enc"

    certbot_dir_config: "{{ docker_dir }}/letsencrypt"
    certbot_dir_work: "{{ home_dir }}/.certbot/work"
    certbot_dir_logs: "{{ home_dir }}/.certbot/logs"
    certbot_dir_live: "{{ certbot_dir_config }}/live/{{ primary_host }}"
    certbot_notification_email: simon.baird@gmail.com

    thost_log_dir: "{{ docker_dir }}/log"
    nginx_conf_dir: "{{ docker_dir }}/nginx-conf"
    nginx_html_dir: "{{ docker_dir }}/nginx-html"
    rails_conf_dir: "{{ docker_dir }}/config"
    secrets_dir: "{{ docker_dir }}/secrets"

    service_name: thost
    db_name: app_production
    db_user: postgres

  tasks:

  - name: Add repo for docker-ce
    ansible.builtin.command:
      cmd: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo warn=no
      creates: /etc/yum.repos.d/docker-ce.repo
    tags:
    - deps

  - name: Install docker and a few other packages we need
    ansible.builtin.dnf:
      state: present
      name:
      - docker-ce
      - docker-ce-cli
      - docker-compose-plugin
      - containerd.io
      - certbot
      - chkconfig
      - make
      - cronie
      - nmap-ncat
      - python3-pip
      - tmux
      - awscli
    tags:
    - deps

  - name: Start docker service
    ansible.builtin.systemd:
      name: docker
      state: started
      enabled: true
    tags:
    - deps

  - name: Start crond
    ansible.builtin.systemd:
      name: crond
      state: started
      enabled: true
    tags:
    - deps

  - name: Pip install certbot-dns-route53
    ansible.builtin.pip:
      name:
        - certbot-dns-route53
    tags:
    - deps

  - name: Make .docker dir for root user
    ansible.builtin.file:
      path: "{{ root_home_dir }}/.docker"
      state: directory
      mode: "0755"
    tags:
    - deps

  - name: Copy config.json file for docker pull credentials
    ansible.builtin.copy:
      src: "{{ docker_config_json }}"
      dest: "{{ root_home_dir }}/.docker/config.json"
      mode: "0600"
    tags:
    - deps

  - name: Create bin dir
    become: false
    ansible.builtin.file:
      path: "{{ bin_dir }}"
      state: directory
      mode: "0755"
    tags:
    - scripts

  - name: Create bash rc dir
    become: false
    ansible.builtin.file:
      path: "{{ bash_rc_dir }}"
      state: directory
      mode: "0755"
    tags:
    - scripts

  - name: Copy up a Makefile and some scripts
    become: false
    ansible.builtin.template:
      src: templates/{{ item }}.j2
      dest: "{{ home_dir }}/{{ item }}"
      mode: "0755"
    with_items:
    - Makefile
    - bin/certbot-create
    - bin/certbot-renew
    - bin/certbot-revoke
    - bin/db-dump-to-file
    - bin/db-backup-to-s3
    - bin/fetch-prerelease-empty
    - .bashrc.d/setup.sh
    tags:
    - scripts

    # (These are in a different place because they're also useful locally)
  - name: Copy cache info scripts
    become: false
    ansible.builtin.copy:
      src: "{{ local_root }}/bin/{{ item }}"
      dest: "{{ bin_dir }}/{{ item }}"
      mode: "0755"
    with_items:
    - cache-info
    - cache-list-items
    - db-migrate.sh
    tags:
    - scripts

  - name: Cron job for regular db dumps
    ansible.builtin.cron:
      name: thost db data dump
      user: root
      job: "{{ bin_dir }}/db-dump-to-file"
      minute: "5"
      hour: "*/8"
    tags:
    - scripts

  - name: Cron job for regular db backups to S3
    ansible.builtin.cron:
      name: thost db s3 backup
      user: "{{ ansible_user }}"
      job: "{{ bin_dir }}/db-backup-to-s3"
      minute: "6"
      hour: "*/8"
    tags:
    - scripts

  - name: Create a cron job for regular prerelease empty fetches
    ansible.builtin.cron:
      name: fetch prerelease empty
      user: "{{ ansible_user }}"
      job: "{{ bin_dir }}/fetch-prerelease-empty"
      minute: "4"
      hour: "*/8"
    tags:
    - scripts

    # The genenerate thumbnail job produces many defunct chrome
    # processes. Restart once in a while to clean them up.
  - name: Create a cron job to restart the jobs container
    ansible.builtin.cron:
      name: jobs container restart
      user: root
      job: "/usr/bin/docker compose -f {{ home_dir }}/docker-compose.yml restart jobs"
      minute: "10"
      hour: "*/8"
    tags:
    - scripts

  - name: Create dir for certbot aws credentials
    become: false
    ansible.builtin.file:
      path: "{{ home_dir }}/.aws"
      state: directory
      mode: "0755"
    tags:
    - certs

  - name: Install AWS credentials for certbot
    become: false
    ansible.builtin.copy:
      src: "{{ certbot_dns_credentials }}"
      dest: "{{ home_dir }}/.aws/credentials"
      mode: "0600"
    tags:
    - certs

  - name: Create a cert if it doesn't exist
    become: false
    ansible.builtin.command:
      cmd: "{{ bin_dir }}/certbot-create"
      creates: "{{ certbot_dir_live }}/fullchain.pem"
    tags:
    - certs

  - name: Renew certs maybe
    become: false
    ansible.builtin.command:
      cmd: "{{ bin_dir }}/certbot-renew"
    register: certbot_renew
    changed_when: |-
      not "No renewals were attempted." in certbot_renew.stdout
    tags:
    - certs

  - name: Show renew output
    ansible.builtin.debug:
      var: certbot_renew.stdout
    tags:
    - certs

  - name: Copy docker-compose file
    become: false
    ansible.builtin.copy:
      src: "{{ docker_compose_file }}"
      dest: "{{ home_dir }}/docker-compose.yml"
      mode: "0644"
    tags:
    - scripts

  - name: Pull latest images
    # So docker compose doesn't try to build
    community.docker.docker_compose_v2_pull:
      project_src: "{{ home_dir }}"
    tags:
    - app
    - fast-upgrade

  - name: Create dir for logs
    become: false
    ansible.builtin.file:
      path: "{{ thost_log_dir }}"
      state: directory
      mode: "0777"
    tags:
    - app

  - name: Create nginx conf dir
    become: false
    ansible.builtin.file:
      path: "{{ nginx_conf_dir }}"
      state: directory
      mode: "0755"
    tags:
    - app

  - name: Copy nginx config
    become: false
    ansible.builtin.template:
      src: templates/docker/nginx-conf/{{ item }}.j2
      dest: "{{ nginx_conf_dir }}/{{ item }}"
      mode: "0644"
    with_items:
    - nginx.conf
    - server-common.conf
    tags:
    - app

  - name: Create nginx html dir
    become: false
    ansible.builtin.file:
      path: "{{ nginx_html_dir }}"
      state: directory
      mode: "0755"
    tags:
    - app

  - name: Copy nginx html files
    become: false
    ansible.builtin.copy:
      src: "{{ local_root }}/docker/nginx-html/{{ item }}"
      dest: "{{ nginx_html_dir }}/{{ item }}"
      mode: "0644"
    with_items:
    - custom502.html
    tags:
    - app

  - name: Create rails local settings dir
    become: false
    ansible.builtin.file:
      path: "{{ rails_conf_dir }}"
      state: directory
      mode: "0755"
    tags:
    - app

  - name: Copy rails local settings
    become: false
    ansible.builtin.template:
      src: templates/docker/config/{{ item }}.j2
      dest: "{{ rails_conf_dir }}/{{ item }}"
      mode: "0644"
    with_items:
    - settings_local.yml
    tags:
    - app

  - name: Create dir for secrets
    become: false
    ansible.builtin.file:
      path: "{{ secrets_dir }}"
      state: directory
      mode: "0755"
    tags:
    - app

  - name: Copy master key file
    become: false
    ansible.builtin.copy:
      src: "{{ master_key_file }}"
      dest: "{{ secrets_dir }}/master.key"
      mode: "0444"
    tags:
    - app
    - secrets

  - name: Copy encrypted credentials file
    become: false
    ansible.builtin.copy:
      src: "{{ credentials_file }}"
      dest: "{{ secrets_dir }}/credentials.yml.enc"
      mode: "0444"
    tags:
    - app
    - secrets

  - name: Copy init script
    ansible.builtin.template:
      src: templates/etc/init.d/{{ service_name }}.j2
      dest: /etc/init.d/{{ service_name }}
      mode: "0755"
    register: init_script
    tags:
    - app

  - name: Run systemctl daemon-reload if required
    ansible.builtin.systemd_service:
      daemon_reload: true
    when: init_script.changed
    tags:
    - app

  - name: Ensure service starts after boot
    ansible.builtin.systemd_service:
      name: thost
      enabled: true
    tags:
    - app

  - name: Fetch latest prerelease
    ansible.builtin.command:
      cmd: "{{ bin_dir }}/fetch-prerelease-empty"
    become: false
    # This may be inaccurate but it doesn't matter much
    changed_when: false
    tags:
    - app
    - fast-upgrade
    - refresh-prerelease

  - name: Start/restart service
    ansible.builtin.systemd:
      name: "{{ service_name }}"
      state: restarted
    tags:
    - app
    - fast-upgrade

    # Only for bootstrapping a new server
  - name: Create db
    community.docker.docker_container_exec:
      container: th_app
      command: bin/rails db:create
    register: db_create
    changed_when: |-
      not "already exists" in db_create.stderr
    tags:
    - db-create
    # This fails currently due to some collation problems.
    # I'll fix the collation problems, but regardless of that,
    # it seems dangerous and weird to run it every time and
    # rely on the error handling in rails and/or postgres to
    # notice the db exists already
    when: false

  - name: Apply database migrations
    community.docker.docker_container_exec:
      container: th_app
      command: bin/rails db:migrate
    register: db_migrate
    changed_when: |-
      db_migrate.stdout != ""
    tags:
    - app
    - fast-upgrade
    - migration

  - name: Post-migration rails restart
    community.docker.docker_container_exec:
      container: th_app
      command: touch tmp/restart.txt
    when: db_migrate.changed
    tags:
    - app
    - fast-upgrade
    - migration

  - name: Show database migration output
    ansible.builtin.debug:
      var: db_migrate.stdout
    when: db_migrate.changed
    tags:
    - app
    - fast-upgrade
    - migration

  - name: Clean up unused docker images
    community.docker.docker_prune:
      images: true
    async: 600
    poll: 10
    tags:
    - cleanup

  - name: Clean up stale containers
    # Can't find way to do this with a module
    ansible.builtin.command:
      cmd: docker compose rm
    register: docker_rm
    changed_when: |-
      not "No stopped containers" in docker_rm.stdout
    tags:
    - cleanup
