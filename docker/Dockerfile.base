#
# Usage:
#  make build-base
#
# or...
#  docker build -t base --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) -f Dockerfile.base .
#

# See https://hub.docker.com/_/ruby
FROM docker.io/library/ruby:3.3-slim@sha256:655ed7e1f547cfe051ec391e5b55a8cb5a1450f56903af9410dd31a6aedc5681

# The values will be passed in with --build-arg
ARG USER_ID
ARG GROUP_ID

# Just so they aren't hard coded below
ARG APP_USER=appuser
ARG APP_PATH=/opt/app
ARG _BUNDLE_PATH=/opt/bundle
ARG NODE_MODULES_PATH=/opt/node_modules
ARG APP_LOG_PATH=/var/log/app

RUN \
  #
  # Use the specified id so we can read and write directories outside the container
  addgroup --gid $GROUP_ID $APP_USER && \
  adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID $APP_USER && \
  #
  # These will be volume mounts in the base image but regular dirs in the prod image
  mkdir -p $APP_PATH && chown -R $APP_USER:$APP_USER $APP_PATH && \
  mkdir -p $_BUNDLE_PATH && chown -R $APP_USER:$APP_USER $_BUNDLE_PATH && \
  mkdir -p $NODE_MODULES_PATH && chown -R $APP_USER:$APP_USER $NODE_MODULES_PATH && \
  #
  # This one is always a volume mount
  mkdir -p $APP_LOG_PATH && chown -R $APP_USER:$APP_USER $APP_LOG_PATH

RUN \
  #
  # First install curl and some cert stuff
  apt-get update -qq && apt-get install -y --no-install-recommends ca-certificates curl gnupg && \
  #
  # Install deb source for node
  curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /usr/share/keyrings/nodesource.gpg && \
  echo "deb [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_16.x nodistro main" > /etc/apt/sources.list.d/nodesource.list && \
  #
  # Install the deb source for yarn
  curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor -o /usr/share/keyrings/yarn.gpg && \
  echo "deb [signed-by=/usr/share/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list && \
  #
  # Install the deb source for chrome
  curl -fsSL https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google.gpg && \
  echo "deb [signed-by=/usr/share/keyrings/google.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list && \
  #
  # Now install some dependencies
  apt-get update -qq && apt-get install -y --no-install-recommends \
    postgresql-client \
    # For webpacker
    nodejs yarn \
    #
    # For editing, e.g. rails secrets
    vim-tiny \
    #
    # Needed at build time to compile gems with native extensions
    gcc g++ make libpq-dev libicu-dev zlib1g-dev libyaml-dev \
    #
    # For puppeteer.
    # (Even though it doesn't use the system chrome, this is the
    # easiest way to get all the required dependencies installed.)
    google-chrome-stable chromium-sandbox libxss1 \
    fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf && \
  #
  # Tidy up
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* /usr/share/doc /usr/share/man

RUN \
  #
  # Installs a newer version of bundle and bundler
  gem update --system --silent --no-document

# Install scripts to start rails and delayed job
COPY --chown=$APP_USER:$APP_USER docker/start-rails.sh docker/start-delayed-job.sh /bin/

WORKDIR $APP_PATH
USER $APP_USER

# Install some helpful bash aliases for use inside the container
COPY docker/.bash_aliases docker/.irbrc /home/$APP_USER/

# Writes to /home/$APP_USER/.bundle/config
RUN bundle config set --global path $_BUNDLE_PATH

# https://stackoverflow.com/questions/69394632/webpack-build-failing-with-err-ossl-evp-unsupported
ENV NODE_OPTIONS=--openssl-legacy-provider

# Make it easy to connect and do things in the container
# See docker-compose for how we start rails
CMD ["/bin/bash"]
